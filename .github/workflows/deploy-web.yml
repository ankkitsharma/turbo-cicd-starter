name: Build and Deploy Web

on:
  push:
    branches: [main, master]
    paths:
      - "apps/web/**"
      - "packages/**"
      - "package.json"
      - "pnpm-lock.yaml"
      - "pnpm-workspace.yaml"
      - "turbo.json"
      - ".github/workflows/deploy-web.yml"
  pull_request:
    branches: [main, master]
    paths:
      - "apps/web/**"
      - "packages/**"
      - "package.json"
      - "pnpm-lock.yaml"
      - "pnpm-workspace.yaml"
      - "turbo.json"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_WEB: ${{ github.repository }}/web
  HUSKY: 0

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Web
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEB }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web/Dockerfile
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: turbo-cicd-vps
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Deploy Web to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            set -e

            # Navigate to project directory (no sudo)
            mkdir -p ~/turbo-ci-starter
            cd ~/turbo-ci-starter

            # Pull latest repo changes or clone if not exists
            if [ ! -d .git ]; then
              git clone https://github.com/${{ github.repository }}.git .
            else
              git pull origin main
            fi

            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull latest Web image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEB }}:latest

            # Reset docker-compose.yml to original state from git
            git checkout HEAD -- docker-compose.yml

            # Update docker-compose.yml with latest Web image
            WEB_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEB }}:latest"
            awk -v image="$WEB_IMAGE" '
            /^  web:/ { 
              in_web = 1; 
              print; 
              next 
            }
            /^  [a-z]/ && in_web { 
              in_web = 0 
            }
            in_web && /^    build:/ { 
              print "    image: " image
              next
            }
            in_web && /^      context:/ { 
              next 
            }
            in_web && /^      dockerfile:/ { 
              next 
            }
            in_web && /^    image:/ { 
              print "    image: " image
              next
            }
            { 
              print 
            }
            ' docker-compose.yml > docker-compose.yml.tmp && mv docker-compose.yml.tmp docker-compose.yml

            # Show the modified docker-compose.yml for debugging
            echo "Modified docker-compose.yml:"
            cat docker-compose.yml

            # Restart Web service
            docker compose up -d --no-deps web

            # Verify Web service is running with correct image
            echo "Web service status:"
            docker compose ps web
            docker inspect $(docker compose ps -q web) | grep -A 5 -B 5 "Image"

            # Clean up unused images
            docker image prune -f
